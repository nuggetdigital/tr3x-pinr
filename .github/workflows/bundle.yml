name: bundle

on:
  push:
    tags:
      - 'v*'

env:
  GO111MODULE: auto
  DSS3_VERSION: v0.7.0
  PRXY_FROM_PORT: 5000
  PRXY_TO_PORT: 5001

jobs:
  prerelease:
    runs-on: ubuntu-20.04
    steps:
      - name: get the current version tag for tr3x-pinr
        run: |
          pushed_tag=${GITHUB_REF/refs\/tags\//}
          echo "[DEBUG] GO_IPFS_TAG=$pushed_tag"
          echo GO_IPFS_TAG=$pushed_tag >> $GITHUB_ENV

      - name: pre release draft
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.GO_IPFS_TAG }}
          release_name: ${{ env.GO_IPFS_TAG }}
          draft: true
          prerelease: true

      - name: prep a release upload url artifact
        run: |
          release_upload_url=${{ steps.create_release.outputs.upload_url }}
          echo "[DEBUG] release upload url $release_upload_url"
          echo "$release_upload_url" > ./release_upload_url.txt

      - name: upload the release upload url artifact
        uses: actions/upload-artifact@v2.2.2
        with:
          name: release_upload_url
          path: ./release_upload_url.txt

  bundle_tr3x_pinr:
    needs: prerelease
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2.3.4

      - name: get the current version tag for tr3x-pinr
        run: |
          pushed_tag=${GITHUB_REF/refs\/tags\//}
          echo "[DEBUG] GO_IPFS_TAG=$pushed_tag"
          echo GO_IPFS_TAG=$pushed_tag >> $GITHUB_ENV

      - name: setup the rest of the env
        run: cat ./.env >> $GITHUB_ENV

      - name: make sure a correct golang version is installed
        uses: actions/setup-go@v2.1.3
        with:
          go-version: '1.16.4'

      - name: checkout the go-ipfs repo
        uses: actions/checkout@v2.3.4
        with:
          repository: ipfs/go-ipfs
          ref: ${{ env.GO_IPFS_TAG }}

      - name: pull in the datastore plugin
        run: go get github.com/ipfs/go-ds-s3@${{ env.DSS3_VERSION }}

      - name: add the plugin to the preload list
        run: |
          echo "s3ds github.com/ipfs/go-ds-s3/plugin 0" \
          >> ./plugin/loader/preload_list

      - name: build go-ipfs incl the s3 datastore plugin
        run: make build

      - name: monkey test the prebuilt ipfs binary
        run: ./cmd/ipfs/ipfs --version --all

      - name: gzipup the binary
        run: gzip -c ./cmd/ipfs/ipfs > ./ipfs.gz

      - name: sha256sum the gzipd binary
        run: sha256sum -b ./ipfs.gz | grep -oE '^[a-f0-9]+' > ./ipfs.gz.sha256sum

      - name: download the release upload url artifact
        uses: actions/download-artifact@v2.0.8
        with:
          name: release_upload_url

      - name: set the release upload url as an env var
        run: echo "RELEASE_UPLOAD_URL=$(<./release_upload_url.txt)" >> $GITHUB_ENV

      - name: upload the sha256sum
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: ./ipfs.gz.sha256sum
          asset_name: go-ipfs-${{ env.GO_IPFS_TAG }}+dss3-${{ env.DSS3_VERSION }}-x86_64-unknown-linux-gnu.gz.sha256sum
          asset_content_type: application/gzip

      - name: upload the prebuilt binary
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: ./ipfs.gz
          asset_name: go-ipfs-${{ env.GO_IPFS_TAG }}+dss3-${{ env.DSS3_VERSION }}-x86_64-unknown-linux-gnu.gz
          asset_content_type: application/gzip

  bundle_tr3x_pinr_prxy:
    needs: prerelease
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2.3.4

      - name: get the current version tag for tr3x-pinr
        run: |
          pushed_tag=${GITHUB_REF/refs\/tags\//}
          echo "[DEBUG] GO_IPFS_TAG=$pushed_tag"
          echo GO_IPFS_TAG=$pushed_tag >> $GITHUB_ENV

      - name: setup the rest of the env
        run: cat ./.env >> $GITHUB_ENV

      - name: make sure a correct rust version is installed
        uses: hecrj/setup-rust-action@v1.3.4
        with:
          rust-version: "1.52.1"

      - name: build tr3x-pinr-prxy
        run: cargo build --release --manifest-path=./prxy/Cargo.toml

      - name: gzipup the prxy binary
        run: gzip -c ./prxy/target/release/prxy > ./prxy.gz

      - name: sha256sum the gzipd prxy binary
        run: sha256sum -b ./prxy.gz | grep -oE '^[a-f0-9]+' > ./prxy.gz.sha256sum

      - name: download the release upload url artifact
        uses: actions/download-artifact@v2.0.8
        with:
          name: release_upload_url

      - name: set the release upload url as an env var
        run: echo "RELEASE_UPLOAD_URL=$(<./release_upload_url.txt)" >> $GITHUB_ENV

      - name: upload the prxy sha256sum
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: ./prxy.gz.sha256sum
          asset_name: tr3x-pinr-prxy-${{ env.GO_IPFS_TAG }}-x86_64-unknown-linux-gnu.gz.sha256sum
          asset_content_type: application/gzip

      - name: upload the prebuilt prxy binary
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: ./prxy.gz
          asset_name: tr3x-pinr-prxy-${{ env.GO_IPFS_TAG }}-x86_64-unknown-linux-gnu.gz
          asset_content_type: application/gzip
name: cd

on:
  push:
    branches:
      - main
      - test

env:
  AWS_REGION: us-east-1
  DIST_SUBDOMAIN: TODO
  ALB_SUBDOMAIN: TODO
  CDN_DEFAULT_TTL: 604800
  CDN_MAX_TTL: 31536000
  CDN_MIN_TTL: 3600
  CDN_DEFAULT_ROOT_OBJECT: index.html
  INSTANCE_IMAGE: ami-0c3086222d6e0e623 # ubuntu 21.04
  IPFS_BINARY_URL: https://github.com/nuggetdigital/tr3x-pinr/releases/download/v0.8.0/go-ipfs-v0.8.0+dss3-v0.7.0-x86_64-unknown-linux-gnu.gz
  PRXY_BINARY_URL: https://github.com/nuggetdigital/tr3x-pinr/releases/download/v0.8.0/tr3x-pinr-prxy-v0.8.0-x86_64-unknown-linux-gnu.gz
  INSTANCE_TYPE: t3.micro # t3.micro~8€monthly t3.nano~4€monthly
  TRAFFIC_PORT: 5000
  GO111MODULE: auto
  DSS3_VERSION: v0.7.0
  PRXY_FROM_PORT: 5000
  PRXY_TO_PORT: 5001
  # the pipeline further needs the following secrets: AWS_ACCESS_KEY_ID_TEST, 
  # AWS_SECRET_ACCESS_KEY_TEST, AWS_ACCESS_KEY_ID_PROD, 
  # AWS_SECRET_ACCESS_KEY_PROD, SSH_USERNAME, SSH_PRIVATE_KEY_NAME, 
  # HOSTED_ZONE_ID_TEST, HOSTED_ZONE_ID_PROD

jobs:
  deploy:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2.3.4

      - name: map branch 2 test/prod
        run: |
          if [[ ${{ github.ref }} == *main ]]; then
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
            echo "HOSTED_ZONE_ID=${{ secrets.HOSTED_ZONE_ID_PROD }}" >> $GITHUB_ENV
            echo "STACK_NAME=tr3x-pinr-stack" >> $GITHUB_ENV
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_PROD }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=test" >> $GITHUB_ENV
            echo "HOSTED_ZONE_ID=${{ secrets.HOSTED_ZONE_ID_TEST }}" >> $GITHUB_ENV
            echo "STACK_NAME=tr3x-pinr-test-stack" >> $GITHUB_ENV
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_TEST }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_TEST }}" >> $GITHUB_ENV
          fi
          echo "SSH_PUBLIC_KEY_NAME=${{ secrets.SSH_PRIVATE_KEY_NAME }}.pub" >> $GITHUB_ENV
          echo "IPFS_PATH=/home/${{ secrets.SSH_USER_NAME }}/ipfs" >> $GITHUB_ENV
          echo "PSEUDO_RANDOMNESS=$(tr -dc 'a-f0-9' < /dev/urandom | head -c16)" >> $GITHUB_ENV

      - uses: aws-actions/configure-aws-credentials@v1.5.9
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: cfn validate stack.yml
        run: |
          aws cloudformation validate-template \
            --template-body="file://stack.yml"

      - name: deploy the core stack
        run: |
          aws cloudformation deploy \
            --stack-name $STACK_NAME \
            --template-file ./stack.yml \
            --parameters-overrides \
              Environment=${{ env.ENVIRONMENT }} \
              DistributionSubdomain=${{ env.DIST_SUBDOMAIN }} \
              LoadBalancerSubdomain=${{ env.ALB_SUBDOMAIN }} \
              HostedZoneId=${{ env.HOSTED_ZONE_ID }} \
              CdnDefaultTtl=${{ env.CDN_DEFAULT_TTL }} \
              CdnMaxTtl=${{ env.CDN_MAX_TTL }} \
              CdnMinTtl=${{ env.CDN_MIN_TTL }} \
              CdnDefaultRootObject=${{ env.CDN_DEFAULT_ROOT_OBJECT }} \
              InstanceImage=${{ env.INSTANCE_IMAGE }} \
              SshPublicKeyName=${{ env.SSH_PUBLIC_KEY_NAME }} \
              ServiceUsername=${{ env.SSH_USERNAME }} \
              IpfsPath=${{ env.IPFS_PATH }} \
              IpfsBinaryUrl=${{ env.IPFS_BINARY_URL }} \
              PrxyBinaryUrl=${{ env.PRXY_BINARY_URL }} \
              InstanceType=${{ env.INSTANCE_TYPE }} \
              TrafficPort=${{ env.TRAFFIC_PORT }} \
              PseudoRandomness=${{ env.PSEUDO_RANDOMNESS }} \
            --capabilities CAPABILITY_NAMED_IAM

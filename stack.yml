AWSTemplateFormatVersion: 2010-09-09

Parameters:
  Environment:
    Description: Application environment
    Type: String
    AllowedValues:
      - test
      - prod
    Default: test

  Domain:
    Description: Route53 domain once purchased
    Type: String
    Default: 📭

  HostedZoneId:
    Description: Id of the hosted zone for the production account
    Type: String
    Default: 🏠

  AcmCertArn:
    Description: |
      AWS ACM certificate ARN for the production environment
      This certificate will be used to secure the alb & dist
    Type: String
    Default: 📃

  # 4now default
  # 099720109477/ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-20210315
  InstanceImage:
    Description: Amazon machine image for the EC2 instance
    Type: String
    Default: ami-0fa37863afb290840

  SSHPublicKeyName:
    Description: EC2 SSH public key name that is available within EC2
    Type: String
    Default: id_rsa_ipfs_pinr.pub

  ServiceUsername:
    Description: Name of the linux user designated to run the ipfs service
    Type: String
    Default: ubuntu

  IpfsPath:
    Description: IPFS data dir path
    Type: String
    Default: /home/ubuntu/ipfs

  IpfsBinaryURL:
    Description: URL serving the ipfs binary incl the S3 datastore plugin
    Type: String
    Default: https://github.com/nuggetdigital/ipfs-pinr/releases/download/v0.8.0/go-ipfs-v0.8.0+dss3-v0.7.0-x86_64-unknown-linux-gnu.gz

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.nano

  DistributionDefaultRootObject:
    Description: Default root object path used by the media CloudFront distribution
    AllowedPattern: "^([a-zA-Z0-9_-]+\\.html){0,1}$"
    Type: String
    Default: index.html

Conditions:
  IsProd: !Equals
    - !Ref Environment
    - prod

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      # NOTE: slicable into 6 subnets
      # 172.26.0.0/19
      # 172.26.32.0/19
      # 172.26.64.0/19
      # 172.26.96.0/19
      # 172.26.128.0/19
      # 172.26.160.0/19
      CidrBlock: 172.26.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default

  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 172.26.160.0/19
      AvailabilityZone: !Sub ${AWS::Region}a
      MapPublicIpOnLaunch: true

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 172.26.128.0/19
      AvailabilityZone: !Sub ${AWS::Region}b
      MapPublicIpOnLaunch: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  Route:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable

  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetA

  SubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetB

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: !Sub ${AWS::StackName}-load-balancer-security-group
      GroupName: !Sub ${AWS::StackName}-load-balancer-security-group
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - Description: !Sub ${AWS::StackName}-load-balancer-security-group-ingress-all
          CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80

      SecurityGroupEgress:
        - Description: !Sub ${AWS::StackName}-load-balancer-security-group-egress-instance
          # DestinationSecurityGroupId: !Ref InstanceSecurityGroup
          CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 5001

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: !Sub ${AWS::StackName}-instance-security-group
      GroupName: !Sub ${AWS::StackName}-instance-security-group
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - Description: !Sub ${AWS::StackName}-instance-security-group-ingress-ssh
          CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22

        - Description: !Sub ${AWS::StackName}-instance-security-group-ingress-swarm
          CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 4001
          ToPort: 4001

        - Description: !Sub ${AWS::StackName}-instance-security-group-ingress-load-balancer
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          IpProtocol: tcp
          FromPort: 80
          ToPort: 5001

      SecurityGroupEgress:
        - Description: !Sub ${AWS::StackName}-instance-security-group-egress-all
          CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
          FromPort: 0
          ToPort: 0

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: InstanceExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: s3:ListBucket
                Resource: !GetAtt Bucket.Arn
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource: !Sub arn:aws:s3:::${Bucket}/*

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub ${AWS::StackName}-instance-profile
      Roles: 
        - !Ref InstanceRole

  Instance:
    DependsOn: Bucket
    Type: AWS::EC2::Instance
    Properties: 
      AvailabilityZone: !Sub ${AWS::Region}a
      SubnetId: !Ref SubnetA
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref InstanceImage
        InstanceType: !Ref InstanceType
        KeyName: !Ref SSHPublicKeyName
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        UserData: !Base64
          "Fn::Sub": |
            #!/bin/bash

            # tmp install jq
            /usr/bin/sudo /usr/bin/apt-get update -y
            /usr/bin/sudo /usr/bin/apt-get install jq -y

            ## make the ipfs data dir
            /bin/mkdir ${IpfsPath}

            # install the ipfs binary
            ## download the customized ipfs+dss3 binary
            /usr/bin/curl -fsSL ${IpfsBinaryURL} \
            | /usr/bin/gunzip \
            > /usr/local/bin/ipfs

            ## grant ipfs binary ownership to the service user
            /usr/bin/sudo /usr/bin/chown \
              ${ServiceUsername}:ubuntu \
              /usr/local/bin/ipfs

            ## allow only the service user to execute the ipfs binary
            /usr/bin/sudo /bin/chmod 0700 /usr/local/bin/ipfs

            # setup ipfs
            export IPFS_PATH=${IpfsPath}

            ## initializin the ipfs repo with a server profile
            /usr/local/bin/ipfs init --empty-repo --profile server,lowpower

            ## remappin the api to our public netiface
            /usr/local/bin/ipfs config Addresses.API /ip4/0.0.0.0/tcp/5001

            ## interpolatin our custom s3 datastore for /blocks
            temp_conf=$(mktemp)
            /usr/bin/jq \
              -c \
              '.Datastore.Spec.mounts[.Datastore.Spec.mounts | map(.mountpoint == "/blocks") | index(true)] |= {"child":{"type":"s3ds","region":"${AWS::Region}","bucket":"${Bucket}","rootDirectory":"content","accessKey":"","secretKey":""},"mountpoint":"/blocks","prefix":"s3.datastore","type":"measure"}' \
              ${IpfsPath}/config \
            > $temp_conf

            ## swipin the ipfs repo in prep of the reinit
            /usr/bin/rm -rf ${IpfsPath}/*

            ## reinit the repo from our custom config 
            /usr/local/bin/ipfs init $temp_conf
            /usr/bin/rm $temp_conf

            ## cleanup of jq and apt stuff
            /usr/bin/sudo /usr/bin/apt-get purge jq -y
            /usr/bin/sudo /usr/bin/apt-get clean -y
            /usr/bin/sudo /usr/bin/apt-get autoclean -y
            /usr/bin/sudo /usr/bin/apt-get autoremove -y

            ## grantin ipfs path ownership to the systemd service user
            /usr/bin/sudo /usr/bin/chown -hR ${ServiceUsername}:ubuntu ${IpfsPath}

            ## adjust the ipfs path access rights
            /usr/bin/sudo /usr/bin/chmod -R 0700 ${IpfsPath}

            ## explicitely grantin ipfs file ownership to the systemd svc usr
            ipfs_files=$(/usr/bin/find ${IpfsPath} -type f)
            /usr/bin/sudo /usr/bin/chown ${ServiceUsername}:ubuntu $ipfs_files

            ## make vol files accessible to the service user only
            /usr/bin/sudo /usr/bin/chmod 0700 $ipfs_files

            # setup a systemd service
            /usr/bin/sudo /usr/bin/echo -e "
              [Unit]
              Description=ipfs daemon dumpin into a s3 datastore
              Wants=network-online.target
              After=network-online.target
              [Service]
              User=${ServiceUsername}
              Environment=\"IPFS_PATH=${IpfsPath}\"
              ExecStart=/usr/local/bin/ipfs daemon
              Type=simple
              Restart=on-failure
              RestartSec=1min
              [Install]
              WantedBy=multi-user.target
            " \
            > /etc/systemd/system/ipfs.service

            ## enable the daemon
            /usr/bin/sudo /bin/systemctl enable ipfs.service

            ## start the daemon
            /usr/bin/sudo /bin/systemctl start ipfs.service

  ApiListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref ApiTargetGroup
          Order: 1
          Type: forward
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /api/v0/add
      ListenerArn: !Ref ApiListener
      Priority: 1

  ApiListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      # Certificates:
      #   - CertificateArn: !Ref AcmCertArn
      DefaultActions:
        - FixedResponseConfig:
            StatusCode: 403
          Type: fixed-response
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTP #HTTPS
      Port: 80 #443
      # SslPolicy: TODO

  ApiTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-api-target-group
      Port: 5001
      Protocol: HTTP
      Targets:
        - Id: !Ref Instance
          Port: 5001
      TargetType: instance
      VpcId: !Ref Vpc

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Sub ${AWS::StackName}-load-balancer
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref SubnetA
        - !Ref SubnetB
      Type: application

  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-datastore-bucket

  BucketOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub cloudfront-${Bucket}-origin-access-identity

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowOriginAccessIdentity
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt BucketOriginAccessIdentity.S3CanonicalUserId
            Action:
              - s3:Get*
              - s3:List*
            Resource:
              - !Sub arn:aws:s3:::${Bucket}
              - !Sub arn:aws:s3:::${Bucket}/*

  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases: !If
          - IsProd
          - [!Ref Domain]
          - []
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          # cache policy name is Managed-CachingOptimized
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          Compress: true
          TargetOriginId: !Sub ${Bucket}-origin
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: !Ref DistributionDefaultRootObject
        Enabled: true
        HttpVersion: http2 # max http version
        # routing ipv6 traffic from Route53 to CloudFront would require an AAAA
        # alias record which carries along extra cost
        IPV6Enabled: false
        Origins:
          - DomainName: !GetAtt Bucket.DomainName
            Id: !Sub ${Bucket}-origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${BucketOriginAccessIdentity}
        PriceClass: PriceClass_100
        ViewerCertificate: !If
          - IsProd
          - AcmCertificateArn: !Ref AcmCertArn
            MinimumProtocolVersion: TLSv1.2_2018
            SslSupportMethod: sni-only
          - CloudFrontDefaultCertificate: true

  DistributionRecordSet:
    Condition: IsProd
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref Domain
      Type: A
      AliasTarget:
        # below zone id is used for any CloudFront Distribution
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt Distribution.DomainName

Outputs:
  InstancePublicIp:
    Description: Public ip of the node
    Value: !GetAtt Instance.PublicIp
  LoadBalancerDomainName:
    Description: DNS name of the load balancer
    Value: !GetAtt LoadBalancer.DNSName
  BucketName:
    Description: Datastore bucket name
    Value: !Ref Bucket
  DistributionDomainName:
    Description: Datastore bucket distribution domain name
    Value: !GetAtt Distribution.DomainName
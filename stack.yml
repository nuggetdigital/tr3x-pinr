AWSTemplateFormatVersion: 2010-09-09

Parameters:
  # SnapshotId:
  #   Description: EBS snapshot id on which to base the volume
  #   Type: String

  # 4now default
  # 099720109477/ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-20210315
  InstanceImage:
    Description: Amazon machine image for the EC2 instance
    Type: String
    Default: ami-0fa37863afb290840

  SSHPublicKeyName:
    Description: EC2 SSH public key name that is available within EC2
    Type: String
    Default: id_rsa_ipfs_pinr.pub

  ServiceUsername:
    Description: Name for a separate linux user runnin the systemd ipfs service
    Type: String
    Default: ubuntu

  IpfsBinaryTarballURL:
    Description: Distribution URL serving ipfs binary tarball
    Type: String
    Default: https://dist.ipfs.io/go-ipfs/v0.8.0/go-ipfs_v0.8.0_linux-amd64.tar.gz

  VolumeIpfsPath:
    Description: Data dir path on the EBS volume
    Type: String
    Default: /data/ipfs

  Environment:
    Description: Application environment
    Type: String
    AllowedValues:
      - test
      - prod
    Default: test

  VolumeSizeGiB:
    Description: Size of the EBS volume in GiB
    Type: Number
    Default: 50

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.nano

  InstanceTenancy:
    Description: EC2 instance tenancy type
    Type: String
    Default: default
    AllowedValues:
      - default
      - dedicated

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      # NOTE: slicable into 6 subnets
      # 172.26.0.0/19
      # 172.26.32.0/19
      # 172.26.64.0/19
      # 172.26.96.0/19
      # 172.26.128.0/19
      # 172.26.160.0/19
      CidrBlock: 172.26.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: !Ref InstanceTenancy

  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 172.26.160.0/19
      AvailabilityZone: !Sub ${AWS::Region}a
      MapPublicIpOnLaunch: true

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 172.26.128.0/19
      AvailabilityZone: !Sub ${AWS::Region}b
      MapPublicIpOnLaunch: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref Vpc

  Route:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetA

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: !Sub ${AWS::StackName}-load-balancer-security-group
      GroupName: !Sub ${AWS::StackName}-load-balancer-security-group
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - Description: !Sub ${AWS::StackName}-load-balancer-security-group-ingress-all
          CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80

      SecurityGroupEgress:
        - Description: !Sub ${AWS::StackName}-load-balancer-security-group-egress-mini-api
          CidrIp: 172.26.160.0/19
          IpProtocol: tcp
          FromPort: 80
          ToPort: 5001

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: !Sub ${AWS::StackName}-instance-security-group
      GroupName: !Sub ${AWS::StackName}-instance-security-group
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - Description: !Sub ${AWS::StackName}-instance-security-group-ingress-ssh
          CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22

        - Description: !Sub ${AWS::StackName}-instance-security-group-ingress-swarm
          CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 4001
          ToPort: 4001

        - Description: !Sub ${AWS::StackName}-instance-security-group-ingress-load-balancer
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          IpProtocol: tcp
          FromPort: 5001
          ToPort: 5001

      SecurityGroupEgress:
        - Description: !Sub ${AWS::StackName}-instance-security-group-egress-all
          CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 0
          ToPort: 0

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: InstanceExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: s3:ListBucket
                Resource: !GetAtt IpfsDatastoreBucket.Arn
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub arn:aws:s3:::${IpfsDatastoreBucket}/*

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub ${AWS::StackName}-instance-profile
      Roles: 
        - !Ref InstanceRole

  Instance:
    Type: AWS::EC2::Instance
    Properties: 
      AvailabilityZone: !Sub ${AWS::Region}a
      SubnetId: !Ref SubnetA
      Volumes:
        - Device: /dev/xvdh # from: ssh into the instance & lsblk
          VolumeId: !Ref Volume
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber

  Volume:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: !Sub ${AWS::Region}a
      Encrypted: false
      Iops: 3000
      MultiAttachEnabled: false
      Size: !Ref VolumeSizeGiB
      # SnapshotId: !Ref SnapshotId
      VolumeType: gp3

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
      LaunchTemplateData:
        IamInstanceProfile: !GetAtt InstanceProfile.Arn
        ImageId: !Ref InstanceImage
        InstanceType: !Ref InstanceType
        KeyName: !Ref SSHPublicKeyName
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        UserData: !Base64
          "Fn::Sub": |
            #!/bin/bash

            # mount & configure the ebs volume
            ## configure the instance's block device
            /usr/bin/sudo /usr/sbin/mkfs -t ext4 /dev/xvdh

            ## make the volume root dir
            /usr/bin/sudo /bin/mkdir /data

            ## remount the volume on instance restarts
            /usr/bin/echo -e \
              "/dev/xvdh  /data  ext4  defaults,nofail,nobootwait  0  2" \
            >> /etc/fstab

            ## mount the volume
            /usr/bin/sudo /bin/mount /dev/xvdh /data

            ## make the ipfs data dir
            /bin/mkdir ${VolumeIpfsPath}

            # install the ipfs binary
            tmp_dir=$(/usr/bin/mktemp -d)
            cd $tmp_dir

            ## download go-ipfs
            /usr/bin/sudo /usr/bin/wget -q ${IpfsBinaryTarballURL}

            ## extract go-ipfs
            tarball=$(/usr/bin/basename ${IpfsBinaryTarballURL})
            /usr/bin/sudo /usr/bin/tar xf $tmp_dir/$tarball

            ## persist the ipfs binary in a std place
            /usr/bin/sudo /usr/bin/mv $tmp_dir/go-ipfs/ipfs /usr/local/bin/ipfs

            ## allow only the service user to execute the ipfs binary
            /usr/bin/sudo /bin/chmod 0700 /usr/local/bin/ipfs

            ## cleanup download artifacts
            cd /
            /usr/bin/sudo /usr/bin/rm -rf $tmp_dir

            # initializin & configurin ipfs incl write gateway func
            export IPFS_PATH=${VolumeIpfsPath}
            /usr/local/bin/ipfs init --profile server

            ## set a disk high water mark
            data_store_max=$((${VolumeSizeGiB} - 1))
            /usr/local/bin/ipfs config Datastore.StorageMax $data_store_maxGB

            ## expose the gateway
            /usr/local/bin/ipfs config Addresses.Gateway /ip4/0.0.0.0/tcp/8080

            ## make the gateway publicly writable (4now)
            /usr/local/bin/ipfs config \
              --json \
              Gateway.HTTPHeaders.Access-Control-Allow-Methods \
              '["GET", "POST"]'

            ## TODO configurin our s3 datastore
            /usr/local/bin/ipfs config \
              --json \
              Datastore.Spec \
              '{"mounts":[{"bucket":"${IpfsDatastoreBucket}","mountpoint":"/blocks","region":"${AWS::Region}"},{"mountpoint":"/","path":"datastore","type":"levelds"}],"type":"mount"}'

            ## grantin vol dir ownership to the systemd service user
            /usr/bin/sudo /usr/bin/chown -hR ${ServiceUsername}:ubuntu /data

            ## make vol dirs accessible to the service user only - 7xx b/c vol
            /usr/bin/sudo /usr/bin/chmod -R 0700 /data

            ## explicitely grantin vol file ownership to the systemd service user
            ipfs_files=$(/usr/bin/find /data/ipfs -type f)
            /usr/bin/sudo /usr/bin/chown ${ServiceUsername}:ubuntu $ipfs_files

            ## make vol files accessible to the service user only
            /usr/bin/sudo /usr/bin/chmod 0700 $ipfs_files

            # setup a systemd service
            /usr/bin/sudo /usr/bin/echo -e "
              [Unit]
              Description=\"ipfs daemon\"
              Wants=network-online.target
              After=network-online.target
              [Service]
              User=${ServiceUsername}
              Environment=\"IPFS_PATH=${VolumeIpfsPath}\"
              ExecStart=/usr/local/bin/ipfs daemon
              Type=simple
              Restart=on-failure
              RestartSec=1min
              LimitNOFILE=8192
              [Install]
              WantedBy=multi-user.target
            " \
            > /etc/systemd/system/ipfs.service

            ## enable the systemd service
            /usr/bin/sudo /bin/systemctl enable ipfs.service

            ## start the systemd service
            /usr/bin/sudo /bin/systemctl start ipfs.service

  IpfsDatastoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-ipfs-datastore-bucket

  # IpfsDatastoreBucketPolicy:
  #   Type: AWS::S3::BucketPolicy
  #   Properties:
  #     Bucket: !Ref IpfsDatastoreBucket
  #     PolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Sid: AllowOriginAccessIdentity
  #           Effect: Allow
  #           Principal:
  #             CanonicalUser: !GetAtt OriginAccessIdentity.S3CanonicalUserId
  #           Action:
  #             - s3:Get*
  #             - s3:List*
  #           Resource:
  #             - !GetAtt IpfsDatastoreBucket.Arn
  #             - !Sub arn:aws:s3:::${IpfsDatastoreBucket}/*

  ApiListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref ApiTargetGroup
          Order: 1
          Type: forward
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /api/v0/add
              - /api/v0/cat
      ListenerArn: !GetAtt ApiListener.Arn
      Priority: 1

  ApiListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      # Certificates: TODO
      #   - CertificateArn: !GetAtt Certificate.Arn
      DefaultActions:
        - FixedResponseConfig:
            StatusCode: 403
          Type: fixed-response
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTP #HTTPS
      Port: 80 #443
      # SslPolicy: TODO

  ApiTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Name: !Sub ${AWS::StackName}-api-target-group
      Port: 5001
      Protocol: HTTP
      Targets:
        - Id: !Ref Instance
          Port: 5001
      TargetType: instance
      VpcId: !Ref Vpc

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Sub ${AWS::StackName}-load-balancer
      Scheme: internet-facing
      Subnets:
        - !Ref SubnetA
        - !Ref SubnetB
      Type: application

Outputs:
  InstancePublicIp:
    Description: Public ip of the node
    Value: !GetAtt Instance.PublicIp
  LoadBalancerDomainName:
    Description: DNS name of the load balancer
    Value: !GetAtt LoadBalancer.DNSName
  VolumeId:
    Description: Id of the EBS volume
    Value: !Ref Volume